name: Build and Release Executable

on:
  workflow_call:
    inputs:
      executable_name:
        description: 'The name of the executable'
        required: false
        type: string
      repo_name:
        description: 'The name of the repository'
        required: true
        type: string
    secrets:
      PRIVATE_REPO_TOKEN: 
        description: 'Token for private repo access'
        required: false

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.semver.outputs.patch }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get Previous Tag
      id: previoustag
      uses: 'WyriHaximus/github-action-get-previous-tag@v1'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        fallback: 1.0.0

    - name: Get Next Minor Version
      id: semver
      uses: 'WyriHaximus/github-action-next-semvers@v1'
      with:
        version: ${{ steps.previoustag.outputs.tag }}

    - name: Output Next Version for Debugging
      run: |
        echo 'Next version: ${{ steps.semver.outputs.patch }}'
      
  build:
    runs-on: windows-latest
    needs: versioning

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if (Test-Path "requirements.txt" ) {
          pip install -r requirements.txt
        } else { 
          Write-Host "requirements.txt not found skipping installation."
        }
      shell: pwsh

    - name: Build executable
      run: pyinstaller --onefile main.py

    - name: Rename executable
      run: |
        mv dist/main.exe dist/${{ inputs.executable_name }}

    - name: List dist directory
      run: dir dist

    - name: Set PAT if exists
      shell: pwsh
      run: |
          if ($env:MY_SECRET -and $env:MY_SECRET -ne "") {
            echo "MY_ENV_VAR" >> $env:GITHUB_ENV
          }
      env:
        MY_SECRET: ${{ secrets.PRIVATE_REPO_TOKEN }}
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.versioning.outputs.next_version }}
        release_name: Release ${{ needs.versioning.outputs.next_version }}
        draft: false
        prerelease: false
        repo: ${{ inputs.repo_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ inputs.executable_name }}
        asset_name: ${{ inputs.executable_name }}
        asset_content_type: application/octet-stream
